ARQUITECTURA CSS

1. Layout y conceptos basicos:

Proyectos del curso y conceptos basicos.

Existen dos archivos (uno que ya vimos anteriormente) que son normalize y reset.CSS
Con normalize lo que conseguimos es quitar algunos estilos predeterminados en los navegadores con ciertas etiquetas, para que cuando abramos la pagina, los quite.
Reset coloca estilos para que sean patrones dentro del navegador con algunas propiedades.

Coceptos basicos:

La arquitectura CSS es una metodologia que se enfoca en la estructura de un proyecto, el objetivo es organizar codigos y carpetas para estandarizar el trabajo en equipo.
Debe ser predecible para que añadir una regla no tenga repercuciones inesperadas
Reutilizable ya que las reglas no son abstractas y asi se podran crear nuevos componentes de forma mas rapida
Mantenible para pòder realizar cambios en el CSS sin necesidad de tener que rehacer el codigo existente
Escalable para que, aunque el proyecto y el CSS aumenten de tamaño, siga siendo facil de mantener.

Los tipos de metodologias que existen, y las mas populares son:

OOCSS
SMACSS
BEM
ITCSS
ACSS (Atomic design)

Cursos necesarios para saber mas:

Como el enfoque del curso no es HTML y CSS, sino la arquitectura CSS, siga los cursos de HTML y CSS que tenemos aquí en Alura Latam:

- HTML5 y CSS3 parte 1: Mi primera página web https://app.aluracursos.com/course/html5-css3-primera-pagina-web
- HTML5 y CSS3 parte 2: Posicionamiento, listas y navegación https://app.aluracursos.com/course/html5-css3-posicionamiento-listas-navegacion
- HTML5 y CSS3 parte 3: Trabajando con formularios y tablas https://app.aluracursos.com/course/html5-css3-formularios-tablas
- HTML5 y CSS3 parte 4: Avanzando en CSS https://app.aluracursos.com/course/html5-css3-avanzando-css

Construyendo y estliziando la cabecera.

Por ahora solo hemos hecho poco de codigo y alinear el CSS, pero es importante recalcar que mientras mas especifico sea el selector que usaremos en el css, mas trabajo nos costara mantenerlo. Se recomienda usar tantas clases como sea posible para crear selectores, haciéndolos más fáciles de entender.

Metodologia BEM.

Lanzada por Yandex intentando resolver una necesidad de lanzar sitios web de manera más rápida y que tuvieron un soporte durante mucho tiempo. Esta metodología BEM, que significa bloque, elemento, modificador como sus siglas lo indican, es una convención de nomenclatura popular para clase en HTML y CSS.
La idea detrás de esto es dividir la interfaz de usuario en bloque independientes. Esto hace que el desarrollo de estas interfaces sea fácil y rápido, incluso cuando estamos trabajando con interfaces de usuario muy complejas. También permite crear componentes de interfaz extensibles y reutilizables. El objetivo es dar significado al nombre de las clases, algo mas informativo y facil de entender.

BEM = Bloque Elemento Modificador

Bloque: Componente de pagina con funcionamiento independiente reutilizable, representados por el atributo class en HTML; el bloque debe ser considerado un padre.
Elementos: No se puede usar por separado ya que esta compuesta de un bloque.
Modificador: Definen apariencia, estado o comportamiento de un bloque

Bloque:
<div class = "card"> esta clase es un bloque
</div>
Elemento:
<form class = "contacto">
    <input class="contacto__input">   ESTE ES EL ELEMENTO
</form>
Modificador:
<div>
    <a class="card__link"> </a> ELEMENTO
    <a class="card__link--resaltar"></a> aqui, RESALTAR ES EL MODIFICADOR
</div>

En sintesis, es una convención de nomenclatura popular para clases en HTML y CSS.

Para saber más sobre la Metodologia Bem, puedes leer la documentación oficial, alli encontraras todo el contenido explicativo acerca de esta metodología: https://en.bem.info/methodology/

Lo que aprendimos en esta aula:

En esta aula recorrimos algunos conceptos importantes sobre qué es una arquitectura CSS, también conocimos la relación entre arquitectura y metodología, además de eso iniciamos en la construcción del proyecto de este curso realizando:

Construcción de la cabecera (Header) de nuestra página Fruta & Fruto.
Aplicamos buenas prácticas para la estilización.
Metodología Bem.
Aplicar la nomenclatura Bem en nuestro proyecto para dar nombre a las clases.

En esta aula, aprendimos varios conceptos importantes y los aplicamos en el desarrollo de nuestro proyecto. Construyendo el código HTML de la cabecera (Header), agregamos los estilos en la cabecera (Header) utilizando nuestros selectores de clases.


2. Estilizando seccion banner y sobre:

Atomic Design.

Metodologia para crear sistemas de diseño:

Cinco niveles en esta metodologia:

-Atomos - Componentes basicos, etiquetas HTML (LABEL, INPUT, BUTTON, ETC)
-Moleculas - Grupos de atomos unidos; unidades mas pequeñas fundamentales de un compuesto . 
-Organismos - Grupos d emoleculas para formar secciones y complejas de una interfaz
-Template - Grupos de organismos que confroman para crear paginas
-Paginas - Instancias de plantillas donde probamos la efectividad del diseño.

Dentro de esta metodologia, es importnte crear un archivo css por cada seccion (menu-link, menu-lista, cabecera, etc...) para tener todo mas ordenado y facil de editar.


Mas sobre Atomic Design: https://bradfrost.com/blog/post/atomic-web-design/

Lo que aprendimos en esta aula:

En esta aula, conocimos la metodología Atomic Design y sus orígenes, el objetivo de esta metodología, además de eso avanzamos en la construcción del proyecto, organizando el código de la cabecera basados en lo aprendido realizando:

Agregamos un nuevo archivo CSS con el nombre de la sección cabecera y trasladamos a este archivo los estilos que construimos en el aula anterior para la cabecera.
Agregamos una nueva carpeta llamada menú y en ella añadimos los nuevos archivos para el menú.
Trasladamos a cada archivo los estilos correspondientes basados en nuestros selectores de clases.
Construimos en el archivo index.html el código para la sección Banner y Sobre.
Agregamos las carpeta y archivos CSS correspondientes para aplicar los estilos en estas nuevas dos secciones del proyecto.
Trabajar de esta forma nos permite resolver algún problema del código, con mayor facilidad sin necesidad de leer código muy extenso.


3. Estilizando seccion de recetas.

Estructurando las recetas:

En esta aula repetimos algunos conceptos que ya conociamos pero trabajando sobre la metodologia atomic.

flex-wrap
https://developer.mozilla.org/es/docs/Web/CSS/flex-wrap#:~:text=flex%2Dwrap-,Resumen,cual%20ser%C3%A1n%20apilados%20los%20elementos

CSS Tricks:
https://www.aluracursos.com/blog/flexbox-css-guia-completo-elementos-y-ejemplos

Lo que aprendimos en esta aula:

A lo largo de esta aula avanzamos aún más en la construcción del proyecto, , aplicando los estilos para la “Sección de Recetas”, durante el proceso aprendimos acerca de:

Organización y estructura de archivos.css de la sección recetas. Agregamos los archivos y carpetas necesarios para aplicar en ellos los estilos para esta nueva sección de recetas, continuando así con la organización de nuestro código aplicando el Atomic Design como lo hicimos en las clases anteriores.
Repasamos la propiedad flex-wrap de CSS.
Aplicamos transiciones en los botones de la sección recetas, resaltando estos elementos y creando así una animación agradable y efectiva para mejorar la interactividad de la página.
Crear y mantener archivos más pequeños.


4. Estilzando seccion quienes somos:

Hemos dado formato a la seccion en cuestion de textos y titulos, tambien, dimos formato a las imagenes de las personas. Eso li¡o hicimos dandole ordenes especificas como border radius y tamaño para delinearla de la siguiente manera:

.persona__imagen{
    height: 300px;
    width: 300px;
    margin: 0 auto;
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    border-radius: 100%;
}

Aqui aprendemos mas propiedades abreviadas:
https://developer.mozilla.org/es/docs/Web/CSS/Shorthand_properties

Nuestras imagenes las agregamos en el CSS y no en el HTML, pero, por que hicimos eso en este caso? Para ubicarlas de mejor manera; cuando una imagen pasa informacion y contenido, es mejor que esten en el index.html, pero cuando son referenciales, es mas facil tenerlo en css. Por ello, la seccion de banner en el index la convertiremos en un div en donde va la imagen (poniendo siempre la clase para conectarla), y de ahi partimos a estilizar y colocar en el CSS:

.banner__imagen{
    background: url('/assets/img/banner.png');
    width: 100%;
    height:calc(100%vh - 72px);
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}

Pero vemos que repetimos muchas veces la palabra 'background' y eso no es eficiente, para ello utilizaremos palabras abreviadas que nos facilitan el trabajo:

.banner__imagen{
    background: url('/assets/img/banner.png') no-repeat center / cover;
    width: 100%;
    height:calc(100%vh - 72px);
}

Queda mucho mas facil, rapido y accesible.

Lo que aprendimos:

En esta cuarta aula, avanzamos un poco más en la construcción de nuestra página Fruta & Fruto y en el camino aprendimos:

Buenas prácticas para trabajar con imágenes.
Que son imágenes ilustrativas.
Cuando una imagen debe estar referenciada dentro de nuestro HTML y cuando debe ser agregada desde el archivo de estilos en el CSS.
Buenas prácticas con la importación de imágenes.
Propiedades abreviadas “Shorthand” en CSS.

5. Estilizando Footer y Responsividad.

Si quieres leer un poco más acerca de diseños responsivos, puedes leer este texto explicativo de la documentación de Developer Mozilla.

Extensiones útiles para realizar pruebas de diseños responsivos:

Window Resizer: Cambia el tamaño de la ventana del navegador para emular varias resoluciones de pantalla.

Viewport Resizer – Responsive Testing Tool: Herramienta de prueba de diseño responsivo para probar la visualización de cualquier sitio web, en cualquier dispositivo móvil.

https://developer.mozilla.org/es/docs/Learn/CSS/CSS_layout/Responsive_Design
https://chrome.google.com/webstore/detail/window-resizer/kkelicaakdanhinjdeammmilcgefonfh?hl=es-419Link
https://chrome.google.com/webstore/detail/viewport-resizer-%E2%80%93-respon/kapnjjcfcncngkadhpmijlkblpibdcgm?hl=es-419

En el recorrer de esta quinta aula del curso finalizamos la construcción de nuestra página y aprendimos:

Sobre los Layouts responsive y su importancia.
Hacer un sitio web responsivo desarrollado para adaptarse a distintos dispositivos móviles.
Cómo configurar el sitio para adaptarse a diferentes tamaños de pantalla.
Felicidades por haber culminado el curso de Arquitectura CSS, nos vemos en un próximo curso.

https://www.aluracursos.com/blog/creacion-de-componentes-css-con-el-estandar-bem